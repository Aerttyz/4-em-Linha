from typing import Optional, Tuple
class Jogo:
  
  def __init__(self):
    """
    Inicializa os atributos (grid e cores dos jogadores) de uma inst√¢ncia da classe Jogo
    """
    self.grid = [['', '', '', '', '', '', ''],
                ['', '', '', '', '', '', ''],
                ['', '', '', '', '', '', ''],
                ['', '', '', '', '', '', ''],
                ['', '', '', '', '', '', ''],
                ['', '', '', '', '', '', '']]
    self.cor_player = 'X'
    self.cor_cpu = 'O'

  def escolher_cor(self) -> None:
    """
    Solicita que o player escolha a cor que preencher√° os espa√ßos do grid em suas jogadas. Define a cor restante para
    a CPU.
    """

    while True:
        cor_escolhida = input("Escolha sua cor (X = üü° ou O = üî¥): ").strip().upper()
        if cor_escolhida in ['X', 'O']:
            self.cor_player = cor_escolhida
            self.cor_cpu = 'O' if cor_escolhida == 'X' else 'X'
            print(f"Voc√™ escolheu: {self.cor_player}. A IA ser√°: {self.cor_cpu}.")
            break
        else:
            print("Escolha inv√°lida. Digite X ou O.")

  def player(self, cor: str) -> None:
      """
      Enquanto uma jogada v√°lida n√£o for efetuada pelo player:
      Recebe o √≠ndice de uma coluna informada pelo player. Em seguida, verifica se o √≠ndice da coluna est√° no intervalo (inclusivo)
      compreendido entre 0 e 6. Caso perten√ßa ao intervalo, retorna o √≠ndice da linha com base na disposi√ß√£o do preenchimento das
      c√©lulas do grid, e preenche a c√©lula indexada aos respectivos componentes (linha x coluna) com a cor escolhida pelo player.
      Caso n√£o perten√ßa ou caso a coluna j√° esteja preenchida at√© o topo, o player √© informado que a jogada √© inv√°lida.
      """
      jogada_efetuada = False
      while not jogada_efetuada:
        posicao = int(input("Player, em qual coluna voc√™ deseja efetuar a jogada? (Valores poss√≠veis: 1 ~ 7): "))
        posicao -= 1
        if posicao >= 0 and posicao <= 6:
            linha = self.verificar_tabuleiro(posicao)
            if linha != -1:
                self.grid[linha][posicao] = cor
                jogada_efetuada = True
                break
            else:
                print('Jogada inv√°lida')
        else:
            print('Jogada inv√°lida')

  def player_IA(self) -> None:
      """
      Modulariza fun√ß√£o que preenche a c√©lula associada √† coluna escolhida pela CPU.

      Primeiro, a IA ir√° calcular qual coluna maximizar√° sua jogada. Em seguida, o
      √≠ndice da coluna ser√° retornado, bem como a linha dispon√≠vel associada √† refe-
      rida coluna, com o objetivo de preencher com a cor do jogador 'CPU' a c√©lula 
      indexada aos elementos retornados.

      Al√©m disso, adiciona camada extra de verifica√ß√£o acerca dos √≠ndices escolhidos
      para que a CPU n√£o efetue uma jogada inv√°lida. Enquanto a jogada n√£o for v√°lida,
      a CPU retornar√° para a etapa de sele√ß√£o da melhor jogada.
      """
      
      profundidade = 4  
      _, posicao = self.minimax_alpha_beta(profundidade, True, float('-inf'), float('inf'))

      jogada_efetuada = False
      while not jogada_efetuada:
        if posicao >= 0 and posicao <= 6:
            linha = self.verificar_tabuleiro(posicao)
            if linha != -1:
                self.grid[linha][posicao] = self.cor_cpu
                jogada_efetuada = True
                break
            else:
                print('Jogada inv√°lida')
        else:
            print('Jogada inv√°lida')

  def verificar_tabuleiro(self, posicao: int) -> int:
    """
    Retorna o √≠ndice da linha associada ao √≠ndice
    da coluna cuja c√©lula est√° vazia.

    Par√¢metros:
      posicao: int -> Representa o √≠ndice da coluna

    Retorno:
      int: representa o √≠ndice da referida linha
    """
    for linha in reversed(range(len(self.grid))):
      if self.grid[linha][posicao] == '':
        return linha
    return -1

  def exibir_tabuleiro(self) -> None:
     """
     Imprime a disposi√ß√£o do grid por meio da itera√ß√£o
     pelos valores (espa√ßos) do tabuleiro.
     """
     print(" 1  2  3  4  5  6  7")
     for linha in self.grid:
        for celula in linha:
            if celula == 'X':
                print("üü°", end=' ')
            elif celula == 'O':
                print("üî¥", end=' ')
            else:
                print("‚ö™", end=' ')
        print()

  def jogar(self) -> None:
    """
    Fun√ß√£o principal respons√°vel por agregar tanto a chamada da fun√ß√£o do player e da CPU
    quanto a verifica√ß√£o de ocorr√™ncia de vit√≥rias ap√≥s cada jogada, bem como por exibir
    o grid (tabuleiro) ap√≥s cada jogada.
    """

    while True:
      self.exibir_tabuleiro()
      print(f'Vez do jogador {self.cor_player}')
      self.player(self.cor_player)
      if self.verificar_vitoria(self.cor_player):
        self.exibir_tabuleiro()
        print(f'Jogador {self.cor_player} venceu!')
        break

      self.exibir_tabuleiro()
      print(f'Vez do jogador {self.cor_cpu}')
      self.player_IA()
      if self.verificar_vitoria(self.cor_cpu):
        self.exibir_tabuleiro()
        print(f'A IA ({self.cor_cpu}) venceu!')
        break

  def verificar_vitoria(self, cor: str) -> bool:
    """
    Fun√ß√£o respons√°vel por verificar se houve uma sequ√™ncia de 4 c√©lulas preenchidas
    pela cor passada como par√¢metro nas dire√ß√µes horizontal, vertical, diagonal para
    cima e diagonal para baixo. Caso a ocorr√™ncia seja verdadeira, retorna True. Caso
    contr√°rio, retorna False

    Par√¢metros:
      cor: str -> Corresponde √† cor do player ou da CPU ('X' ou 'O')

    Retorno:
      bool: corresponde a evid√™ncia de ocorr√™ncia ou n√£o ocorr√™ncia de vit√≥ria por algum
      dos jogadores.
    """
    
    #horizontal 
    for linha in range(6):
      for coluna in range(4):
        if all(self.grid[linha][coluna+i] == cor for i in range(4)):
          return True
    
    #vertical
    for linha in range(3):
      for coluna in range(7):
        if all(self.grid[linha+i][coluna] == cor for i in range(4)):
          return True

    #diagonal pra cima
    for linha in range(3):
      for coluna in range(4):
        if all(self.grid[linha+i][coluna+i] == cor for i in range(4)):
          return True

    #diagonal pra baixo
    for linha in range(3, 6):
      for coluna in range(4):
        if all(self.grid[linha-i][coluna+i] == cor for i in range(4)):
          return True

    return False

  def avaliar_vertical(self, coluna: int) -> int:
    """
    Fun√ß√£o respons√°vel por estimar a pontua√ß√£o na dire√ß√£o vertical, com base na 
    coluna passada como par√¢metro. Por exemplo: quanto maior for a quantidade de
    c√©lulas preenchidas na vertical em determinada coluna, maior ser√° a estimativa
    da pontua√ß√£o, tendo em vista que a CPU estar√° mais pr√≥ximo da vit√≥ria.

    Nesse sentido, a heur√≠stica da estimativa na dire√ß√£o vertical foi implementada
    da seguinte maneira: 

    1) Declara-se e atribui o valor '0' √† vari√°vel 'score_coluna';

    2) Para cada linha no range(3), isto √©, para as linhas com √≠ndice 0, 1 e 2:

      2.1) Por meio de um 'list comprehension', armazena-se em uma lista uma sequ√™ncia de
          4 c√©lulas indexadas √† coluna passada como par√¢metro e √†s linhas acrescidas com
          o valor 'i' no range(4), isto √©, no intervalo de valores de 0, 1, 2 e 3, tendo
          como refer√™ncia o √≠ndice atual da linha definido na etapa 2).

      2.2) Verifica-se, para cada sequ√™ncia, quantas c√©lulas est√£o preenchidas com a cor
          da CPU (valor armazenado na vari√°vel 'n_cpu');

      2.3) Verifica-se, para cada sequ√™ncia, quantas c√©lulas n√£o est√£o preenchidas (valor
          armazenado na vari√°vel 'n_vazias').

      2.4) Verifica se o valor calculado em 2.2) √© maior que zero e se a soma dos valores
          calculados em 2.2) e em 2.3) corresponde a 4.

      2.5) Em caso afirmativo, o score da coluna √© acrescido de 10*(quantidade de c√©lulas
          preenchidas com a cor da CPU).

      2.6) Caso seja inferior a 4, o score associado ao √≠ndice da coluna √© penalizado,
          sendo subtra√≠do 100 unidades de seu valor.

    3) Ao fim das itera√ß√µes, o score (pontua√ß√£o) da coluna √© retornado, na perspectiva
        de an√°lise da maximiza√ß√£o na dire√ß√£o vertical.

    Par√¢metros:
      coluna: int -> Corresponde √† posi√ß√£o/√≠ndice da coluna 
    
    Retorno:
      int: corresponde √† pontua√ß√£o estimada da coluna na perspectiva de an√°lise da maximiza√ß√£o
          na dire√ß√£o vertical.

    """

    score_coluna = 0
    for linha in range(3):
      trecho = [self.grid[linha + i][coluna] for i in range(4)]
      n_cpu = trecho.count(self.cor_cpu)
      n_vazias = trecho.count('')
      if n_cpu > 0 and n_cpu + n_vazias == 4:
        score_coluna += n_cpu * 10
      elif n_cpu + n_vazias < 4:
        score_coluna -= 100
    return score_coluna

  def avaliar_horizontal(self, linha: int) -> int:
    """
    Fun√ß√£o respons√°vel por estimar a pontua√ß√£o na dire√ß√£o horizontal, com base na 
    linha passada como par√¢metro. Por exemplo: quanto maior for a quantidade de
    c√©lulas preenchidas na horizontal tendo como base a c√©lula que pode ser preenchida
    a partir de determinada coluna como √≠ndice, maior ser√° a estimativa da pontua√ß√£o, 
    tendo em vista que a CPU estar√° mais pr√≥ximo da vit√≥ria.

    Nesse sentido, a heur√≠stica da estimativa na dire√ß√£o horizontal foi implementada
    da seguinte maneira: 

    1) Declara-se e atribui o valor '0' √† vari√°vel 'score_linha';

    2) Para cada coluna no range(4), isto √©, para as colunas com √≠ndice 0, 1, 2 e 3:

      2.1) Por meio de um 'list comprehension', armazena-se em uma lista uma sequ√™ncia de
          3 c√©lulas indexadas √† linha passada como par√¢metro e √†s colunas acrescidas e
          decrementadas com o valor 'i' no range(1, 4), isto √©, no intervalo de valores de
          1, 2 e 3, tendo como refer√™ncia o √≠ndice atual da linha definido na etapa 2).

          Na pr√°tica, analisa-se as tr√™s c√©lulas anteriores e as tr√™s c√©lulas sucessoras.

      2.2) Verifica-se na sequ√™ncia, quantas c√©lulas est√£o preenchidas com a cor da CPU 
          (valor armazenado na vari√°vel 'n_cpu');

      2.3) Verifica-se na sequ√™ncia, quantas c√©lulas n√£o est√£o preenchidas (valor armazenado
          na vari√°vel 'n_vazias').

      2.4) Verifica se o valor calculado em 2.2) √© maior que zero e se a soma dos valores
          calculados em 2.2) e em 2.3) corresponde a 4.

      2.5) Em caso afirmativo, o score da linha √© acrescido de 10*(quantidade de c√©lulas
          preenchidas com a cor da CPU).

      2.6) Caso seja inferior a 4, o score associado ao √≠ndice da linha √© penalizado,
          sendo subtra√≠do 100 unidades de seu valor.

    3) Ao fim das itera√ß√µes, o score (pontua√ß√£o) da linha √© retornado, na perspectiva
        de an√°lise da maximiza√ß√£o na dire√ß√£o horizontal.

    Par√¢metros:
      coluna: int -> Corresponde √† posi√ß√£o/√≠ndice da linha 
    
    Retorno:
      int: corresponde √† pontua√ß√£o estimada da coluna na perspectiva de an√°lise da maximiza√ß√£o
          na dire√ß√£o horizontal.

    """

    score_linha = 0
    for coluna in range(4):
      trecho = [self.grid[linha][coluna + i] for i in range(4)]
      n_cpu = trecho.count(self.cor_cpu)
      n_vazias = trecho.count('')
      if n_cpu > 0 and n_cpu + n_vazias == 4:
        score_linha += n_cpu * 10
      elif n_cpu + n_vazias < 4:
        score_linha -= 100
    return score_linha
  
  def avaliar_diagonais(self, linha: int, coluna: int) -> int:
    """
    Fun√ß√£o respons√°vel por estimar a pontua√ß√£o na dire√ß√£o das diagonais. Por exemplo: 
    quanto maior for a quantidade de c√©lulas preenchidas em cada diagonal (superior
    esquerda, superior direita, inferior esquerda e inferior direta), maior ser√° a
    estimativa da pontua√ß√£o, tendo em vista que a CPU estar√° mais pr√≥ximo da vit√≥ria.

    Nesse sentido, a heur√≠stica da estimativa na dire√ß√£o diagonal foi implementada
    da seguinte maneira: 

    1) Declara-se e atribui o valor '0' √† vari√°vel 'score_diagonal';

    2) Declara-se a vari√°vel 'dire√ß√µes' (correspondente a uma lista de tuplas cujos valores
        equivalem a pares ordenados x, y, isto √©, √≠ndices de linha e coluna associados a
        todos os sentidos da dire√ß√£o diagonal);

    3) Itera por cada tupla da lista (isto √©, cada diagonal da referida c√©lula ser√° analisada):

      3.1) Declara-se a vari√°vel trecho e a inicializa com uma lista vazia;

      3.2) Declara-se a vari√°vel contador e a inicializa com o valor '1';

      3.3) Enquanto o valor do contador for inferior √† 4:

        3.3.1) Enquanto a c√©lula na diagonal averiguada: a) possuir um valor diferente da cor do oponente;
              b) possuir um √≠ndice v√°lido, existente no grid do jogo; adicione tal c√©lula √† vari√°vel 'trecho'.
              
        3.3.2) Caso contr√°rio, o 'while' loop √© interrompido e a pr√≥xima diagonal √© analisada.

    4) Ao fim, calcula-se, com base na quantidade de c√©lulas vazias e preenchidas com a cor da CPU nas respectivas
        diagonais, o valor estimado na dire√ß√£o diagonal da pontua√ß√£o ao jogar na referida coordenada repassada como
        par√¢metro.
    
    5) Por fim, a pontua√ß√£o supramencionada √© retornada.

    Par√¢metros:
      linha: int -> corresponde ao √≠ndice da linha associada √† c√©lula dispon√≠vel na respectiva coluna
      coluna: int -> corresponde ao √≠ndice da coluna analisada pela CPU
    
    Retorno:
      int: corresponde √† pontua√ß√£o estimada da coluna na perspectiva de an√°lise da maximiza√ß√£o
          na dire√ß√£o diagonal.

    """

    score_diagonal = 0
    direcoes = [(1, 1), (-1, 1), (1, -1), (-1, -1)]

    for dx, dy in direcoes:
      trecho = []
      contador = 1
      while contador < 4:
        nova_linha = linha + dx * contador
        nova_coluna = coluna + dy * contador
        if 0 <= nova_linha < 6 and 0 <= nova_coluna < 7:
          if self.grid[nova_linha][nova_coluna] == self.cor_player:
            break
          trecho.append(self.grid[nova_linha][nova_coluna])
        else:
            break
        contador += 1
       
    n_cpu = trecho.count(self.cor_cpu)
    n_vazias = trecho.count('')
    if n_cpu > 0 and n_cpu + n_vazias == 4:
      score_diagonal += n_cpu * 10
    elif n_cpu + n_vazias < 4:
      score_diagonal -= 100

    return score_diagonal

  def avaliar_tabuleiro(self) -> int:
    """
    Avalia o tabuleiro e retorna a pontua√ß√£o total com base nas heur√≠sticas de avalia√ß√£o
    vertical, horizontal e diagonal.

    Retorno:
      int: pontua√ß√£o total do tabuleiro.
    """
    score_total = 0
    for linha in range(6):
        for coluna in range(7):
            if self.grid[linha][coluna] == self.cor_cpu:
                score_total += self.avaliar_vertical(coluna)
                score_total += self.avaliar_horizontal(linha)
                score_total += self.avaliar_diagonais(linha, coluna)
            elif self.grid[linha][coluna] == self.cor_player:
                score_total -= (self.avaliar_vertical(coluna) +
                                self.avaliar_horizontal(linha) +
                                self.avaliar_diagonais(linha, coluna))
    return score_total

  def minimax_alpha_beta(self, profundidade: int, max: bool, alfa: float, beta: float) -> Tuple[int, Optional[int]]:
    """
    Implementa o algoritmo Minimax com poda Alpha-Beta para determinar a melhor jogada da CPU.
    
    Retorno:
      Tuple[int, Optional[int]]: Retorna a pontua√ß√£o da melhor jogada e o √≠ndice da coluna escolhida.
    """
    if self.verificar_vitoria(self.cor_cpu):
        return 1000, None
    elif self.verificar_vitoria(self.cor_player):
        return -1000, None
    elif profundidade == 0:
        return self.avaliar_tabuleiro(), None
    
    if max:
        return self.maximizar(profundidade, alfa, beta)
    else:
        return self.minimizar(profundidade, alfa, beta)
    
  def maximizar(self, profundidade: int, alfa: float, beta: float) -> Tuple[int, Optional[int]]:
    """
    Maximiza a pontua√ß√£o da CPU, escolhendo a melhor coluna para jogar.
    Retorno:
      Tuple[int, Optional[int]]: Retorna a pontua√ß√£o m√°xima e o √≠ndice da coluna escolhida.
    """

    melhor_score = float('-inf')
    melhor_coluna = None

    for coluna in range(7):
        linha = self.verificar_tabuleiro(coluna)
        if linha == -1:
            continue

        self.grid[linha][coluna] = self.cor_cpu
        score, _ = self.minimax_alpha_beta(profundidade - 1, False, alfa, beta)
        self.grid[linha][coluna] = ''

        if score > melhor_score:
            melhor_score = score
            melhor_coluna = coluna
        alfa = max(alfa, score)
        if beta <= alfa:
            break

    return melhor_score, melhor_coluna
  
  def minimizar(self, profundidade: int, alfa: float, beta: float) -> Tuple[int, Optional[int]]:
    menor_score = float('inf')
    melhor_coluna = None

    for coluna in range(7):
        linha = self.verificar_tabuleiro(coluna)
        if linha == -1:
            continue

        self.grid[linha][coluna] = self.cor_player
        score, _ = self.minimax_alpha_beta(profundidade - 1, True, alfa, beta)
        self.grid[linha][coluna] = ''

        if score < menor_score:
            menor_score = score
            melhor_coluna = coluna
        beta = min(beta, score)
        if beta <= alfa:
            break
    return menor_score, melhor_coluna
      






   
              
              
              
        

